// memoized-fib.cpp
//

#include "stdafx.h"
#include <iostream>
#include <map>

using namespace std;

//typedef long (*call_back) (int, int&);           //function pointer param in function signature 

typedef pair<int, long> Int_Pair;

//base recursive fibonacci 
long fibonacci(int n)
{
	if (n <= 1 )
		return n;
	return fibonacci(n - 1) + fibonacci(n - 2);
}

//call with lambda 
//long fibL(int n)
//{
//	int count = 0;
//	cout << "calculating..." << endl;
//	auto r = [](int n)->long { return fibonacci(n); };
//	cout << "after " << count++ << " itereations" << endl;
//	
//	return r(n);	
//}

//Memoization function 
//caches the result, stores in a map
//
//int n: number to calc fibbonaci
//long(*fib)(int): pointer to base fib function
//
long fibWrap(int n, long(*fib)(int))
{
	map <int, int> memo;

	long value;
	size_t i = memo.count(n);

  if (i != 0)                                           // if in storage cache return cached result
  		value = memo.at(i);
  	else						//otherwise calc & store
  	{
  		if (n == 0)
  			value = n;
  		else
  			value = fib(n);
  		memo.insert(Int_Pair(n,value));
  	}
	return value;
}

void main()
{
	
	long num_fib = 25;

  cout << "fib("<< num_fib <<")= " << fibWrap(num_fib,fibonacci) << endl;
}
